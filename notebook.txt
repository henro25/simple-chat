Engineering Notebook for Simple Chat

Goal: Develop a messaging system using a client-server architecture with two different wire protocols (custom & JSON).

2/5/24 - Begin brainstorming and planning the structure, logic, and specification [COMPLETED]

--- SUMMARY OF KEY REQUIREMENTS ---

1. User authentication (account creation, login)
2. Listing accounts
3. Sending and receiving messages
4. Message storage and retrieval
5. Account and message deletion
6. GUI client interface

--- REQUIREMENTS AND STRUCTURE OUTLINE ---

Language: Python (fastest to build)
Repo Structure:
    - /server: Server-side code
    - /client: Client-side code
    - /docs: Documentation
    - /tests: Unit and integration tests
    - README.md: Project overview and setup instructions
Custom Protocol:
    - Use Strings!
    - Naive Implementation via key, val pairs:

        Client -> Server:
            Log in:
                - User [name]
                - Password, [hashed password]
            Send message:
                - Send [destination user] [source user] [message]
            
UI Flow: Login screen -> Contact list -> Chat window
    - Using Tkinter as front end

1 and 2. Creating/Login to an Account (unique username + hashed password):
    Creating Account:
    - if supplied username already exists
        - user is prompted for the password
            - if hashed password matches to stored, existing hashed password (using hashlib), then move to contact list
            - else, display an error message indicating incorrect password and prompt the user to try again 
        - [will not be implemented, but ideal] if the user fails multiple times (i.e., 3 attempts), provide an option to reset the password or recover the account.
    - if supplied username does not exist
        - prompt the user to register by providing a password.
        - hash the password and store the username and password mapping securely in the database [note: will simply be a dictionary in initial implementation, and can scale to persistent storage via Redis or SQLite later if necessary]

    Login to Account:
    - using a login name and password, log into an account
    - an login that does not exist or bad user name should display an error
    
    Note: A successful login should display the number of unread messages.

3. List accounts (Contact List):
    - Displays the number of unread messages
    - Also displays subset of accounts that fit a text wildcard pattern (searching for accounts)
    - If there are more accounts than can comfortably be displayed, allow iterating through the accounts

4. Send a message to a recipient:
    - If the recipient is logged in, deliver immediately
    - If not the message should be stored until the recipient logs in and requests to see the message
    - IDEA: store messages on user queues!
        - Each user will have its own receive queue that will only poll when user is logged in and requests to read
        - There will be a dictionary mapping login name to receive queue and clients send messages by specifying the login name

5. Read messages:
    - If there are undelivered messages, display those messages. The user should be able to specify the number of messages they want delivered at any single time.

6. Delete a message:
    - A deleted message will be gone for both sender and recipient

7. Delete an account:
    - Username and password are deleted from accounts SQL table
    - Username and password are inserted into the old_accounts SQL table so that a future user does not use the same username


--- DATA FLOW OUTLINE ---

To open the Client GUI, we first establish a socket connection with the server

Creating an Account:
    - Once a user inserts a login name and presses enter, send the login name to the server to check that that login name does not exist
        - Server sends back valid username or invalid username (note: there is no race condition since SQL Lite only allows 1 write at a time)
    - Once a user inserts a password and presses enter, send the username and hashed password to the server and store that (username, password) into an accounts table
        - Server sends a success message to client (list of other usernames and num unread for each)

Login to Account:
    - User sends login name and password
        - If login is not in accounts table, send an error message to client
        - Else if, password does not match, then send an error message to client
        - Else, send a success message to client (list of other usernames and num unread for each)

Load Message Landing Page:
    - Display the list of usernames (with num unread for each) and total unread msgs from data received from server

Read Chat Conversation + Send Message Panel:
    - After opening a converstion, send a chat history request for that conversation (sender and receiver as well as number of messages requested)
        - Server: when recieving a request chat, find the corresponding messages through filtering the messages table by sender and recipient and sorting by timestamp, then send the messages to the client [a user specified amount of times]
            - The server also uses its own clock to mark timestamps for each incoming chat message
        - Client: [TODO] Handle the pagination of viewing a specified number of messages at a time
    - For each unread message sent from server, update the read for that message in server
    - When sending a message from client, send the message + message UUID + recipitant to server
        - REAL TIME UPDATES: If the recipient is online, then the message is immediately sent to the other client
            - TODO: choosing either:
                - Push Mechanism: The server pushes an update to all affected clients immediately.
                - Polling: Clients periodically poll for changes.

Delete message:
    - The client GUI will have a delete button next to each of the client's messages to delete a message and will send the corresponding message ID to the server to delete that message to remove it from the database [deletion show up in real time? -- need a feature for this]
        - Server sends an additional new message or delete message to the other client

Delete an account:
    - Button to delete account sends a delete account with username to the server
    - Do not delete all associated messages since the other existing accounts should ideally still be able to view past messages

--- WIRE PROTOCOL ---

Message Format:

[protocol version] [action] [data]

Error Codes:

USER_TAKEN  = 1 (when client creates a new username, username is already taken)
USER_DNE    = 2 (when client logs in, the requested username does not exist)
WRONG_PASS  = 3 (when client logs in, the password is incorrect)
DB_ERROR    = 4 (when server experiences a database error)

Server:

- Sending error to client:
    - Format:  1.0 ERROR [error code]
    - Example: 1.0 ERROR 1
- Sending list of usernames and num unread (sent after login, excludes client's username):
    - Format:  1.0 USERS [list of users]
    - Example: 1.0 USERS bridgetma04 6 jwaldo 1 ewang 2
- Sending a chat history
    - Format:  1.0 MSGS [user 1] [num msgs] [msg ID, num words, msg 1] [msg ID, num words, msg 2] [num msgs] [msg ID, num words, msg 3] ...
    - Example: 1.0 MSGS henro 2 111 2 hello bridget 112 3 it's henry ! 113 1 Hi!
- Sending a real-time sent message:
    - Format:  1.0 PUSH_MSG [recipient] [msg]
    - Example: 1.0 PUSH_MSG bridgetma04 hello bridget
- Sending a real-time delete message:
    - Format:  1.0 DEL_MSG [sender] [msg ID]
    - Example: 1.0 DEL_MSG bridgetma04 2241

Client:

- Create new account: 
    - Format:  1.0 CREATE [username] [hashed_password] 
    - Example: 1.0 CREATE henro 2620
- Login:   
    - Format:  1.0 LOGIN [username] [hashed_password]
    - Example: 1.0 LOGIN henro 2620
- Request Chat History:
    - Format:  1.0 READ [username] [other user]
    - Example: 1.0 READ henro bridgetma04
- Read an unread message:
    - Format:  1.0 READ_ACK [username] [message ID]
    - Example: 1.0 READ_ACK henro 2241
- Send Message:
    - Format:  1.0 SEND [message ID] [sender] [recipient] [message]
    - Example: 1.0 SEND 2241 henro bridgetma04 hello!
- Delete Message:
    - Format:  1.0 DEL_MSG [sender] [recipient] [message ID]
    - Example: 1.0 DEL_MSG henro bridgetma04 2241
- Delete Accont:
    - Format:  1.0 DEL_ACC [username]
    - Example: 1.0 DEL_ACC bridgetma04

2/6/24 - Start implementing the UI, client server socket code, and SQLite Database [IN_PROGRESS]

--- UI Implementation ---

Created:
    1. Main Menu (Landing Page), where user has option to create and account or login
    2. Login Page, which has username and password text entries and submit and back buttons
    3. Registration Page, which has username and password text entries and submit and back buttons
    4. [TODO] Build a messaging page (and associated UI logic) for users after they successfully log in.
        a. Currently, the messaging page will be blank

Notes: Attempted to use tkinter, but for some reason the Labels and Text Entry components were failing to appear (although the Buttons were appearing just fine). After 2 hours of debugging, eventually switched to using PyQt.

--- SQLite Database ---

Using SQLite for account registration, login, and authentication.

--- Client Server Socket Code ---

Creating a multi‚Äêclient server to handle message routing and persistence.